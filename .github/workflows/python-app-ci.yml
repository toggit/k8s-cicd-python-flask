# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
# this is CICD python workflow. 
name: Python-Flask-CICD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  TEST:
    name: this job responsible for CI 
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest

  # CD-JOB:
  #   name: this job responsible for CD 
  #   needs: CI-JOB
  #   runs-on: ubuntu-latest
  #   env:
  #     LOGIN: ${{ secrets.DOCKER_LOGIN }}
  #     NAME: ${{ secrets.DOCKER_NAME }}
  #   steps:
  #     - name: Login to docker.io
  #       run:  echo ${{ secrets.DOCKER_PWD }} | docker login --username ${{ secrets.DOCKER_LOGIN }} --password-stdin
  #     - uses: actions/checkout@v3
  #     - name: Build image
  #       run: docker build -t $LOGIN/$NAME:${GITHUB_REF_NAME} -f Dockerfile .
  #     - name: Push image tag to docker.io
  #       run: docker push $LOGIN/$NAME:${GITHUB_REF_NAME}
  #     - name: Tag last release as latest
  #       run: docker tag $LOGIN/$NAME:${GITHUB_REF_NAME} $LOGIN/$NAME:latest
  #     - name: Push image tag latest to docker.io
  #       run: docker push $LOGIN/$NAME:latest

  BUILD:
    name: this job responsible for CD 
    needs: TEST
    runs-on: ubuntu-latest
    env:
      LOGIN: ${{ secrets.DOCKER_LOGIN }}
      NAME: ${{ secrets.DOCKER_NAME }}
    steps:
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags:  ${{ secrets.DOCKER_LOGIN }}/$NAME:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
